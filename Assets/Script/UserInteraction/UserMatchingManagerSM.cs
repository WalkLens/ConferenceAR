using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting.Antlr3.Runtime;
using UnityEngine;

public class UserMatchingManagerSM : MonoBehaviour
{
    [SerializeField] NotificationManager notificationManager;           // 알림을 관리하는 부분
    [SerializeField] InteractionUIManager interactionUIManager;         // HMD UI를 관리하는 부분
    [SerializeField] UserBehaviourManager userBehaviourManager;         // 사용자의 행동(만났기 위해 이동,)을 관리하는 부분

    public static UserMatchingManagerSM Instance { get; private set; }

    // Flags
    public bool isUserMatchingSended = false;
    public bool isUserMatchingSucceed = false;
    public bool isUserMet = false;
    public bool isUserRibbonSelected = false;
    public bool isUserFileSended = false;

    // User Data
    public string imsiId = "241201";
    public Transform myPosition;
    public Transform partnerPosition;

    // Phases
    public enum Phase
    {
        Matching,
        RouteVisualizing,
        AfterMatching,
    }
    private Phase currentPhase;

    private void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }

        Instance = this;
    }

    ///////////// Corutine just for Test /////////////////
    private IEnumerator SendUserMatchingRoutine()
    {
        if (!isUserMatchingSucceed)
        {
            yield return new WaitForSeconds(5f);
            isUserMatchingSended = true;
        }
    }

    private IEnumerator SendUserFileRoutine()
    {
        if (isUserMet)
        {
            yield return new WaitForSeconds(20f);
            isUserFileSended = true;
        }
    }
    //////////////////////////////////////////////////////

    private void Start()
    {
        StartCoroutine(SendUserMatchingRoutine());
        StartCoroutine(SendUserFileRoutine());
    }

    void Update()
    {
        // SWITCH로 변경하면 좋을 듯
        switch (currentPhase)
        {
            // Phase 1. Matching - Accept가 눌렸는지 주기적으로 감시
            case Phase.Matching:
                if (isUserMatchingSended)
                {
                    notificationManager.OnMatchRequestReceived(imsiId);
                    //isUserMatchingSended = false;
                    currentPhase++;
                }
                break;

            // Phase 2. Route Visualizing - 매칭이 완료되면 경로 시각화
            case Phase.RouteVisualizing:
                if (isUserMatchingSucceed && !isUserMet)
                {
                    interactionUIManager.ShowRoute(myPosition.position, partnerPosition.position);
                    userBehaviourManager.CheckMetState(myPosition.position, partnerPosition.position);

                    // IMSI MOVER - 사용자가 움직이는 중이라고 임시 가정
                    myPosition.transform.position = Vector3.MoveTowards(myPosition.position, partnerPosition.position, 1f * Time.deltaTime);
                }
                else if (isUserMet)
                {
                    interactionUIManager.HideRoute();
                    interactionUIManager.ShowBox();
                    currentPhase++;
                }
                break;

            // Phase 3. After Matching Service On
            case Phase.AfterMatching:
                if (isUserRibbonSelected)       // 1) 만났을 때 리본이 선택되었는지 주기적으로 확인
                {
                    interactionUIManager.OpenBox();
                }
                if (isUserFileSended)           // 2) 파일이 왔는지 확인
                {
                    notificationManager.OnFileReceived(imsiId);
                    isUserFileSended = false;
                }
                break;
        }
    }
}
